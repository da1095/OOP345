/*OOP345 WS04 P2
Name: Devang Ramubhai Ahir Ahir
Id: 153484209
Module: reflect
File: reflect.txt*/

A container is a holding object that holds a group of things (its elements). They're implemented as class templates, 
allowing for a lot of variety in the types that can be used as elements. The container handles its elements' storage 
space and provides member functions to access them, either directly or through iterators (reference objects with similar properties to pointers). 
Containers mimic standard programming structures such as dynamic arrays (vector), queues (queue), stacks (stack), heaps (priority queue), linked 
lists (list), trees (set), and associative arrays (map). Many containers share features and have numerous member functions in common. The choice 
of the sort of container to utilise for a certain need is usually based not only on the container's functionality, but also on the efficiency of 
some of its members (complexity). This is particularly true for sequence containers, which provide various complexity trade-offs between 
inserting/removing items and accessing them. Container adaptors stack, queue, and priority queue are used. Container adaptors aren't whole container 
classes; instead, they're interfaces that rely on an object of one of the container types (like deque or list) to handle the components. 
The underlying container is encased in such a way that members of the container adaptor can access its elements regardless of the underlying container class.
